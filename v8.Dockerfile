# JavaScript engine of Chrome and its various derivatives, Node.js etc.
#
# URL:      https://v8.dev/
# Standard: ESnext
# Tech:     register VM, 3-tier JIT, irregexp
# Language: C++
# License:  BSD-3-Clause
# Org:      Google
# LOC:      1323810 (cloc include src)
#
# Timeline: 2008-
#  * 2008: V8 1.0 (baseline full-codegen, method JIT, no bytecode)
#  * 2009: irregexp engine
#    * https://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html 
#  * 2010: Crankshaft - optimizing SSA-based JIT
#    * https://blog.chromium.org/2010/12/new-crankshaft-for-v8.html
#  * 2017: Ignition + Turbofan
#    * New pipeline, replacing original codegen and Crankshaft
#    * Ignition: register-based VM interpreter
#    * TurboFan: optimizing JIT compiler
#    * https://v8.dev/blog/launching-ignition-and-turbofan
#    * https://v8.dev/docs/ignition
#    * https://v8.dev/docs/turbofan
#  * 2023: Maglev - mid-tier JIT, fast SSA-based optimizing compiler
#    * https://v8.dev/blog/maglev
#
# VM (Ignition):
#   * Register-based indirect-threaded VM
#   * Accumulator (implicit input/output register) - compact 1-arg binary ops
#   * Ops: https://github.com/v8/v8/blob/main/src/interpreter/interpreter-generator.cc
#     (metacode, with actual assembly generated by TurboFan backend)
#   * Design doc: https://docs.google.com/document/d/11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44/view
#
# Building V8:
#   * https://v8.dev/docs/build-gn
#   * https://v8.dev/docs/compile-arm64
#   * https://www.chromium.org/developers/gn-build-configuration/
#   * https://github.com/just-js/v8

FROM javascripten-debian:stable

ARG JS_REPO=https://chromium.googlesource.com/v8/v8.git

WORKDIR /work
RUN git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /work/depot_tools
ENV PATH=/work/depot_tools:$PATH

RUN fetch --nohooks --nohistory v8

# lkgr='last known good revision'
#ARG JS_COMMIT=lkgr
ARG JS_COMMIT=14.2.3
RUN gclient sync --no-history --revision "v8@${JS_COMMIT}"

WORKDIR /work/v8

# Build deps
RUN sed -i -e 's/ stable-updates$/ stable-updates bookworm/' /etc/apt/sources.list.d/debian.sources  # for the missing libpcre3-dev in trixie
RUN build/install-build-deps.sh --no-prompt

# Can do basic x64 build, but no customizations, fails for arm64 on linux
#RUN tools/dev/gm.py x64.release-d8

# Build clang - no pre-built linux arm64 toolchain for third_party/llvm-build
#RUN export ARCH=$(uname -m | sed -e 's/aarch64/arm64/; s/x86_64/x64/') && \
#    if [ $ARCH = "arm64" ]; then \
#      python build/linux/sysroot_scripts/install-sysroot.py --arch="$ARCH" && \
#      tools/clang/scripts/build.py --without-android --without-fuchsia --host-cc=gcc --host-cxx=g++ --use-system-cmake --disable-asserts --with-ml-inliner-model=""; \
#    fi
#RUN tools/rust/build_rust.py  # fails on linux arm64 => enable_rust=false

# Use debian's clang for //build/toolchain/linux/unbundle
RUN apt-get update -y && apt-get install -y clang lld rustc cargo
ENV CC=/usr/bin/clang CXX=/usr/bin/clang++ AR=/usr/bin/llvm-ar NM=/usr/bin/llvm-nm

RUN export ARCH=$(uname -m | sed -e 's/aarch64/arm64/; s/x86_64/x64/') && \
    mkdir -p out/release && \
    { \
      # third_party/llvm-build doesn't have prebuilt arm64 linux binaries so \
      # use host toolchain. Might also need to enable_rust=false \
      if [ "$ARCH" = "arm64" ]; then echo \
        clang_use_chrome_plugins=false \
        clang_warning_suppression_file=\"\" \
        custom_toolchain=\"//build/toolchain/linux/unbundle:default\" \
        host_toolchain=\"//build/toolchain/linux/unbundle:default\" \
        is_clang=true \
        use_sysroot=false; \
      fi; \
      # Full release build, trim some fat. \
      # PGO profiles not available => chrome_pgo_phase=0 \
      echo \
        chrome_pgo_phase=0 \
        dcheck_always_on=false \
        is_component_build=false \
        is_debug=false \
        is_official_build=true \
        target_cpu='"'$ARCH'"' \
        treat_warnings_as_errors=false \
        v8_enable_disassembler=false \
        v8_enable_gdbjit=false \
        v8_enable_i18n_support=false \
        v8_enable_sandbox=false \
        v8_enable_temporal_support=false \
        v8_enable_test_features=false \
        v8_enable_webassembly=false \
        v8_target_cpu='"'$ARCH'"' \
        v8_use_external_startup_data=false; \
    } | tr ' ' '\n' >out/release/args.gn

RUN gn gen out/release/
RUN autoninja -C out/release/ d8

ENV JS_BINARY=/work/v8/out/release/d8
RUN ${JS_BINARY} -e 'console.log(version())' >version
CMD ${JS_BINARY}
